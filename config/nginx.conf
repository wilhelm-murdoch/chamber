worker_processes auto;

error_log  /proc/self/fd/2 error;

events {
  worker_connections 65536;
  use                epoll;
  multi_accept       on;
}

http {
  include                     mime.types;
  default_type                application/octet-stream;
  error_log                   off;
  server_tokens               off;
  sendfile                    on;
  tcp_nopush                  on;
  tcp_nodelay                 on;
  client_body_buffer_size     128k;
  client_max_body_size        10m;
  client_header_buffer_size   1k;
  large_client_header_buffers 4 4k;
  output_buffers              1 32k;
  client_header_timeout       3m;
  client_body_timeout         3m;
  send_timeout                3m;
  open_file_cache             max=1000 inactive=20s;
  open_file_cache_valid       30s;
  open_file_cache_min_uses    5;
  open_file_cache_errors      off;
  keepalive_timeout           65;
  keepalive_requests          100000;

  server {
    listen                    8000 backlog=65536;
    server_name               localhost;
    chunked_transfer_encoding off;
    gzip_static               on;
    gzip_http_version         1.1;
    gzip_proxied              expired no-cache no-store private auth;
    gzip_vary                 on;

    error_page 405 = $uri;

    location / {
      default_type text/html;
      echo_location_async /header;
      echo "<div class='wrapper' data-text='{ chamber }'><h1 class='glitch'>{ chamber }</h1></div>";
      echo_location_async /footer;
    }

    location /auth {
      auth_basic "Restricted";
      auth_basic_user_file /etc/nginx/.htpasswd;
      default_type text/html;
      echo_sleep 0.25;
      echo_location_async /header;
      echo_flush;
      echo "<div class='glitch' data-text='Smooth Scaling'>Smooth Scaling</div>";
      echo "<pre>";
      echo_location_async /status;
      echo "</pre>";
      echo "</body></html>";
    }

    location /unavailable {
      return 503;
    }

    location /cold_shoulder {
      return 499;
    }

    location /too_many_requests {
      return 429;
    }

    location /not_found {
      return 404;
    }

    location /slow {
      default_type text/html;
      let $sleep 3 + ( $connections_active / 1000 );
      echo_sleep $sleep;
      echo_location_async /header;
      echo_flush;
      echo "<div class='glitch' data-text='$echo_timer_elapsed seconds'>$echo_timer_elapsed seconds</div></body></html>";
    }

    location /slower {
      default_type text/html;
      echo_sleep 60;
      echo_location_async /header;
      echo_flush;
      echo "<div class='glitch' data-text='$echo_timer_elapsed seconds'>$echo_timer_elapsed seconds</div></body></html>";
    }

    location /slowest {
      default_type text/html;
      echo_sleep 80;
      echo_location_async /header;
      echo_flush;
      echo "<div class='glitch' data-text='$echo_timer_elapsed seconds'>$echo_timer_elapsed seconds</div></body></html>";
    }

    location /usertiming {
      default_type text/html;
      echo_sleep 0.25;
      echo_location_async /header;
      echo_flush;
      echo "<script>window.performance.mark('mark_headers_loaded');</script>";
      echo "<div class='glitch' data-text='Smooth Scaling'>Smooth Scaling</div>";
      echo "<pre>";
      echo_location_async /status;
      echo "</pre>";
      echo_sleep 2;
      echo "<script>window.performance.mark('mark_body_loaded');</script>";
      echo_sleep 0.25;
      echo "<script>window.performance.measure('measure_page_load', 'mark_headers_loaded', 'mark_body_loaded');</script>";
      echo "</body></html>";
    }

    location /headers {
      default_type text/html;
      echo_location_async /header;
      echo_sleep $echo_timer_elapsed;
      echo_flush;
      echo "<div class='glitch' data-text='Smooth Scaling'>Smooth Scaling</div>";
      echo "<pre>$echo_client_request_headers</pre>";
      echo "</body></html>";
    }

    location /body {
      default_type text/html;
      echo_location_async /header;
      echo_sleep $echo_timer_elapsed;
      echo_flush;
      echo "<div class='glitch' data-text='Smooth Scaling'>Smooth Scaling</div>";
      echo "<pre>$request_body</pre>";
      echo "</body></html>";
    }

    location /debug {
      default_type text/html;
      echo_location_async /header;
      echo_sleep $echo_timer_elapsed;
      echo_flush;
      echo "<div class='glitch' data-text='Smooth Scaling'>Smooth Scaling</div>";
      echo "<pre>$echo_client_request_headers</pre>";
      echo "<pre>$request_body</pre>";
      echo "</body></html>";
    }

    location /embedded {
      default_type text/html;
      echo_location_async /header;
      echo_sleep $echo_timer_elapsed;
      echo_flush;
      echo "<div class='glitch' data-text='Smooth Scaling'>Smooth Scaling</div>";
      echo "<img src='/slow-image' style='display: block; margin-left: auto; margin-right: auto'>";
      echo "<img src='/not_found' style='display: block; margin-left: auto; margin-right: auto'>";
      echo "</body></html>";
    }

    location /ok {
      return 200;
    }

    location /header {
      default_type text/html;
      set $steps "$steps";
      set $i "$i";

      echo -n "
<!DOCTYPE html>
<html lang='en'>
    <head>
      <meta name='apple-mobile-web-app-capable' content='yes' \>
      <meta http-equiv='refresh' content='15' \>
      <meta charset='utf-8' \>
      <title>Chamber</title>
    </head>
    <style>
      * {
        margin: 0;
        padding: 0;
      }

      body, html {
        width: 100%;
        height: 100%;
        background-color: black;
      }

      .wrapper {
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
      }

      .wrapper h1.glitch {
        color: white;
        font-family: sans-serif;
        font-weight: 800;
        position: relative;
        font-size: 100px;
        padding: 30px;
      }

      .wrapper h1.glitch::before, .wrapper h1.glitch::after {
        padding: 30px;
        color: white;
        content: '{ chamber }';
        position: absolute;
        width: 100%;
        height: 100%;
        background: black;
        overflow: hidden;
        top: 0;
      }

      .wrapper h1.glitch::before {
        left: 3px;
        text-shadow: -2px 0 red;
        animation-name: glitch-animation-1;
        animation-duration: 2s;
        animation-timing-function: linear;
        animation-delay: 0s;
        animation-iteration-count: infinite;
        animation-direction: reverse-alternate;
      }

      .wrapper h1.glitch::after {
        left: -3px;
        text-shadow: -2px 0 blue;
        animation-name: glitch-animation-2;
        animation-duration: 2s;
        animation-timing-function: linear;
        animation-delay: 0s;
        animation-iteration-count: infinite;
        animation-direction: reverse-alternate;
      }
"
      echo -n "
      @keyframes glitch-animation-1 {
        0% {
          clip: rect(36px, 600px, 94px, 30px);
        }
        5% {
          clip: rect(120px, 600px, 5px, 30px);
        }
        10% {
          clip: rect(116px, 600px, 138px, 30px);
        }
        15% {
          clip: rect(10px, 600px, 40px, 30px);
        }
        20% {
          clip: rect(82px, 600px, 100px, 30px);
        }
        25% {
          clip: rect(149px, 600px, 17px, 30px);
        }
        30% {
          clip: rect(38px, 600px, 7px, 30px);
        }
        35% {
          clip: rect(125px, 600px, 110px, 30px);
        }
        40% {
          clip: rect(63px, 600px, 41px, 30px);
        }
        45% {
          clip: rect(27px, 600px, 50px, 30px);
        }
        50% {
          clip: rect(81px, 600px, 101px, 30px);
        }
        55% {
          clip: rect(129px, 600px, 44px, 30px);
        }
        60% {
          clip: rect(7px, 600px, 96px, 30px);
        }
        65% {
          clip: rect(124px, 600px, 71px, 30px);
        }
        70% {
          clip: rect(6px, 600px, 88px, 30px);
        }
        75% {
          clip: rect(89px, 600px, 65px, 30px);
        }
        80% {
          clip: rect(138px, 600px, 2px, 30px);
        }
        85% {
          clip: rect(62px, 600px, 57px, 30px);
        }
        90% {
          clip: rect(109px, 600px, 70px, 30px);
        }
        95% {
          clip: rect(116px, 600px, 19px, 30px);
        }
        100% {
          clip: rect(130px, 600px, 52px, 30px);
        }
      }
      @keyframes glitch-animation-2 {
        0% {
          clip: rect(29px, 600px, 93px, 30px);
        }
        5% {
          clip: rect(14px, 600px, 68px, 30px);
        }
        10% {
          clip: rect(94px, 600px, 40px, 30px);
        }
        15% {
          clip: rect(4px, 600px, 58px, 30px);
        }
        20% {
          clip: rect(1px, 600px, 28px, 30px);
        }
        25% {
          clip: rect(39px, 600px, 11px, 30px);
        }
        30% {
          clip: rect(45px, 600px, 93px, 30px);
        }
        35% {
          clip: rect(83px, 600px, 94px, 30px);
        }
        40% {
          clip: rect(39px, 600px, 110px, 30px);
        }
        45% {
          clip: rect(95px, 600px, 88px, 30px);
        }
        50% {
          clip: rect(96px, 600px, 103px, 30px);
        }
        55% {
          clip: rect(17px, 600px, 29px, 30px);
        }
        60% {
          clip: rect(53px, 600px, 1px, 30px);
        }
        65% {
          clip: rect(129px, 600px, 128px, 30px);
        }
        70% {
          clip: rect(74px, 600px, 105px, 30px);
        }
        75% {
          clip: rect(40px, 600px, 48px, 30px);
        }
        80% {
          clip: rect(90px, 600px, 52px, 30px);
        }
        85% {
          clip: rect(57px, 600px, 83px, 30px);
        }
        90% {
          clip: rect(39px, 600px, 143px, 30px);
        }
        95% {
          clip: rect(25px, 600px, 87px, 30px);
        }
        100% {
          clip: rect(128px, 600px, 91px, 30px);
        }
      }
    </style>
    <body>";
    }

    location /footer {
      default_type text/html;

      echo -n "
    </body>
</html>";
    }

    location /body/large {
      default_type text/html;
      echo_duplicate 150_000 "echo ";
    }

    location /body/xlarge {
      default_type text/html;
      echo_duplicate 1_500_000 "echo ";
    }

    location /body/xxlarge {
      default_type text/html;
      echo_duplicate 15_000_000 "echo ";
    }

    location /api {
      default_type application/json;
      set $from 1;
      set $to 3;
      set_random $random $from $to;
      echo_sleep 0.$random;
      echo_flush;
      echo '{"elapsed": "$echo_timer_elapsed seconds", "status": "OK", "connections_active": $connections_active, "connections_waiting": $connections_waiting}';
    }

    location /api/oauth {
      default_type application/json;
      set $from 1;
      set $to 3;
      set_random $random $from $to;
      echo_sleep 0.$random;
      echo_flush;
      set_secure_random_alphanum $access_token 32;
      set_secure_random_alphanum $refresh_token 64;
      echo '{"access_token":"$access_token","token_type":"bearer","expires_in":1209600,"refresh_token":"$refresh_token","scope":"admin","created_at":"$date_gmt"}';
    }

    location /api/path {
      default_type application/json;
      let $sleep 0 + ( $connections_active / 100 );
      echo_sleep $sleep;
      echo_flush;
      echo '{"elapsed": "$echo_timer_elapsed seconds", "status": "OK", "connections_active": $connections_active, "connections_waiting": $connections_waiting}';
    }

    location /api/xml {
      default_type application/xml;
      set $from 1;
      set $to 3;
      set_random $random $from $to;
      echo_sleep 0.$random;
      echo_flush;
      echo '<?xml version="1.0" encoding="UTF-8"?><Pet><id>0</id><Category><id>0</id><name>string</name></Category><name>doggie</name><photoUrl><photoUrl>string</photoUrl></photoUrl><tag><Tag><id>0</id><name>string</name></Tag></tag><status>available</status></Pet>';
    }

    location /status {
      stub_status on;
    }
  }
}
# worker_processes auto;

# error_log  /proc/self/fd/2 error;

# events {
#   worker_connections 65536;
#   use                epoll;
#   multi_accept       on;
# }

# http {
#   include                     mime.types;
#   default_type                application/octet-stream;
#   error_log                   off;
#   server_tokens               off;
#   sendfile                    on;
#   tcp_nopush                  on;
#   tcp_nodelay                 on;
#   client_body_buffer_size     128k;
#   client_max_body_size        10m;
#   client_header_buffer_size   1k;
#   large_client_header_buffers 4 4k;
#   output_buffers              1 32k;
#   client_header_timeout       3m;
#   client_body_timeout         3m;
#   send_timeout                3m;
#   open_file_cache             max=1000 inactive=20s;
#   open_file_cache_valid       30s;
#   open_file_cache_min_uses    5;
#   open_file_cache_errors      off;
#   keepalive_timeout           65;
#   keepalive_requests          100000;

  server {
    listen       80;
    server_name  localhost;

    chunked_transfer_encoding off;
    gzip_static               on;
    gzip_http_version         1.1;
    gzip_proxied              expired no-cache no-store private auth;
    gzip_vary                 on;

    location / {
      default_type text/html;
      echo -n "<!DOCTYPE html><html lang='en'><head><meta name='apple-mobile-web-app-capable' content='yes' \><meta http-equiv='refresh' content='15' \><meta charset='utf-8' \><title>Chamber</title></head><style>"
      echo -n "*{margin:0;padding:0}body,html{width:100%;height:100%;background-color:#000}.wrapper{width:100%;height:100%;display:flex;justify-content:center;align-items:center}.wrapper h1.glitch{color:#fff;font-family:sans-serif;font-weight:800;position:relative;font-size:100px;padding:30px}.wrapper h1.glitch::after,.wrapper h1.glitch::before{padding:30px;color:#fff;content:'{ chamber }';position:absolute;width:100%;height:100%;background:#000;overflow:hidden;top:0}.wrapper h1.glitch::before{left:3px;text-shadow:-2px 0 red;animation-name:glitch-animation-1;animation-duration:2s;animation-timing-function:linear;animation-delay:0s;animation-iteration-count:infinite;animation-direction:reverse-alternate}.wrapper h1.glitch::after{left:-3px;text-shadow:-2px 0 #00f;animation-name:glitch-animation-2;animation-duration:2s;animation-timing-function:linear;animation-delay:0s;animation-iteration-count:infinite;animation-direction:reverse-alternate}"
      echo -n "@keyframes glitch-animation-1{0%{clip:rect(36px,600px,94px,30px)}5%{clip:rect(120px,600px,5px,30px)}10%{clip:rect(116px,600px,138px,30px)}15%{clip:rect(10px,600px,40px,30px)}20%{clip:rect(82px,600px,100px,30px)}25%{clip:rect(149px,600px,17px,30px)}30%{clip:rect(38px,600px,7px,30px)}35%{clip:rect(125px,600px,110px,30px)}40%{clip:rect(63px,600px,41px,30px)}45%{clip:rect(27px,600px,50px,30px)}50%{clip:rect(81px,600px,101px,30px)}55%{clip:rect(129px,600px,44px,30px)}60%{clip:rect(7px,600px,96px,30px)}65%{clip:rect(124px,600px,71px,30px)}70%{clip:rect(6px,600px,88px,30px)}75%{clip:rect(89px,600px,65px,30px)}80%{clip:rect(138px,600px,2px,30px)}85%{clip:rect(62px,600px,57px,30px)}90%{clip:rect(109px,600px,70px,30px)}95%{clip:rect(116px,600px,19px,30px)}100%{clip:rect(130px,600px,52px,30px)}}@keyframes glitch-animation-2{0%{clip:rect(29px,600px,93px,30px)}5%{clip:rect(14px,600px,68px,30px)}10%{clip:rect(94px,600px,40px,30px)}15%{clip:rect(4px,600px,58px,30px)}20%{clip:rect(1px,600px,28px,30px)}25%{clip:rect(39px,600px,11px,30px)}30%{clip:rect(45px,600px,93px,30px)}35%{clip:rect(83px,600px,94px,30px)}40%{clip:rect(39px,600px,110px,30px)}45%{clip:rect(95px,600px,88px,30px)}50%{clip:rect(96px,600px,103px,30px)}55%{clip:rect(17px,600px,29px,30px)}60%{clip:rect(53px,600px,1px,30px)}65%{clip:rect(129px,600px,128px,30px)}70%{clip:rect(74px,600px,105px,30px)}75%{clip:rect(40px,600px,48px,30px)}80%{clip:rect(90px,600px,52px,30px)}85%{clip:rect(57px,600px,83px,30px)}90%{clip:rect(39px,600px,143px,30px)}95%{clip:rect(25px,600px,87px,30px)}100%{clip:rect(128px,600px,91px,30px)}}"
      echo -n "</style><body><div class='wrapper' data-text='{ chamber }'><h1 class='glitch'>{ chamber }</h1></div></body></html>";
    }

    location /auth {
      default_type text/html;
      auth_basic "Restricted";
      auth_basic_user_file /etc/nginx/.htpasswd;
    }

    location /slow {
      default_type application/json;
      echo_sleep 5;
      echo "{\"elapsed\": \"$echo_timer_elapsed\"}";
    }

    location /slower {
      default_type application/json;
      echo_sleep 10;
      echo "{\"elapsed\": \"$echo_timer_elapsed\"}";
    }

    location /slowest {
      default_type application/json;
      echo_sleep 20;
      echo "{\"elapsed\": \"$echo_timer_elapsed\"}";
    }

    location /headers {
      default_type application/json;
      content_by_lua_block {
        items = {}
        for k, v in pairs(ngx.req.get_headers()) do
          table.insert(items, string.format('{"key": "%s", "value": "%s"}', string.upper(k), v))
        end

        ngx.say('[', table.concat(items, ','), ']')
      }
    }

    location /body {
      default_type text/html;
      echo "<pre>$request_body</pre>";
    }

    location /body/large {
      default_type text/html;
      echo_duplicate 150_000 "echo ";
    }

    location /body/xlarge {
      default_type text/html;
      echo_duplicate 1_500_000 "echo ";
    }

    location /body/xxlarge {
      default_type text/html;
      echo_duplicate 15_000_000 "echo ";
    }

    location /status {
      stub_status on;
    }

    location /up {
      default_type text/html;
      return 200;
    }

    # HTTP/1.1 1xx
    location /code/100 {
      default_type application/json;
      return 100 '{"code": 100,"message": "Continue", "description": "The server has received the request headers, and the client should proceed to send the request body."}';
    }

    location /code/101 {
      default_type application/json;
      return 101 '{"code": 101,"message": "Switching Protocols", "description": "The requester has asked the server to switch protocols."}';
    }

    location /code/102 {
      default_type application/json;
      return 102 '{"code": 102,"message": "Processing", "description": "A WebDAV request may contain many sub-requests involving file operations, requiring a long time to complete the request. This code indicates that the server has received and is processing the request, but no response is available yet."}';
    }

    location /code/103 {
      default_type application/json;
      return 103 '{"code": 103,"message": "Checkpoint", "description": "Used in the resumable requests proposal to resume aborted PUT or POST requests."}';
    }

    # HTTP/1.1 2xx
    location /code/200 {
      default_type application/json;
      return 200 '{"code": 200,"message": "OK", "description": "The request is OK (this is the standard response for successful HTTP requests)."}';
    }

    location /code/201 {
      default_type application/json;
      return 201 '{"code": 201,"message": "Created", "description": "The request has been fulfilled, and a new resource is created."}';
    }

    location /code/202 {
      default_type application/json;
      return 202 '{"code": 202,"message": "Accepted", "description": "The request has been accepted for processing, but the processing has not been completed."}';
    }

    location /code/203 {
      default_type application/json;
      return 203 '{"code": 203,"message": "Non-Authoritative Information", "description": "The request has been successfully processed, but is returning information that may be from another source."}';
    }

    location /code/204 {
      default_type application/json;
      return 204 '{"code": 204,"message": "No Content", "description": "The request has been successfully processed, but is not returning any content."}';
    }

    location /code/205 {
      default_type application/json;
      return 205 '{"code": 205,"message": "Reset Content", "description": "The request has been successfully processed, but is not returning any content, and requires that the requester reset the document view."}';
    }

    location /code/206 {
      default_type application/json;
      return 206 '{"code": 206,"message": "Partial Content", "description": "The server is delivering only part of the resource due to a range header sent by the client."}';
    }

    location /code/207 {
      default_type application/json;
      return 207 '{"code": 207,"message": "Multi-Status", "description": "The message body that follows is by default an XML message and can contain a number of separate response codes, depending on how many sub-requests were made."}';
    }

    location /code/208 {
      default_type application/json;
      return 208 '{"code": 208,"message": "Already Reported", "description": "The members of a DAV binding have already been enumerated in a preceding part of the (multistatus) response, and are not being included again."}';
    }

    location /code/226 {
      default_type application/json;
      return 226 '{"code": 226,"message": "IM Used", "description": "The server has fulfilled a request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance."}';
    }

    # HTTP/1.1 3xx
    location /code/300 {
      default_type application/json;
      return 300 '{"code": 300,"message": "Multiple Choices", "description": "A link list. The user can select a link and go to that location. Maximum five addresses."}';
    }

    location /code/301 {
      default_type application/json;
      return 301 '{"code": 301,"message": "Moved Permanently", "description": "The requested page has moved to a new URL."}';
    }

    location /code/302 {
      default_type application/json;
      return 302 '{"code": 302,"message": "Found", "description": "The requested page has moved temporarily to a new URL."}';
    }

    location /code/303 {
      default_type application/json;
      return 303 '{"code": 303,"message": "See Other", "description": "The requested page can be found under a different URL."}';
    }

    location /code/304 {
      default_type application/json;
      return 304 '{"code": 304,"message": "Not Modified", "description": "Indicates the requested page has not been modified since last requested."}';
    }

    location /code/305 {
      default_type application/json;
      return 305 '{"code": 305,"message": "Use Proxy", "description": "The requested resource is available only through a proxy, the address for which is provided in the response."}';
    }

    location /code/306 {
      default_type application/json;
      return 306 '{"code": 306,"message": "Switch Proxy", "description": "-- No longer used --."}';
    }

    location /code/307 {
      default_type application/json;
      return 307 '{"code": 307,"message": "Temporary Redirect", "description": "The requested page has moved temporarily to a new URL."}';
    }

    location /code/308 {
      default_type application/json;
      return 308 '{"code": 308,"message": "Resume Incomplete", "description": "Used in the resumable requests proposal to resume aborted PUT or POST requests."}';
    }

    # HTTP/1.1 4xx
    location /code/400 {
      default_type application/json;
      return 400 '{"code": 400,"message": "Bad Request", "description": "The request cannot be fulfilled due to bad syntax."}';
    }

    location /code/401 {
      default_type application/json;
      return 401 '{"code": 401,"message": "Unauthorized", "description": "The request was a legal request, but the server is refusing to respond to it. For use when authentication is possible but has failed or not yet been provided."}';
    }

    location /code/402 {
      default_type application/json;
      return 402 '{"code": 402,"message": "Payment Required", "description": "-- Reserved for future use --."}';
    }

    location /code/403 {
      default_type application/json;
      return 403 '{"code": 403,"message": "Forbidden", "description": "The request was a legal request, but the server is refusing to respond to it."}';
    }

    location /code/404 {
      default_type application/json;
      return 404 '{"code": 404,"message": "Not Found", "description": "The requested page could not be found but may be available again in the future."}';
    }

    location /code/405 {
      default_type application/json;
      return 405 '{"code": 405,"message": "Method Not Allowed", "description": "A request was made of a page using a request method not supported by that page."}';
    }

    location /code/406 {
      default_type application/json;
      return 406 '{"code": 406,"message": "Not Acceptable", "description": "The server can only generate a response that is not accepted by the client."}';
    }

    location /code/407 {
      default_type application/json;
      return 407 '{"code": 407,"message": "Proxy Authentication Required", "description": "The client must first authenticate itself with the proxy."}';
    }

    location /code/408 {
      default_type application/json;
      return 408 '{"code": 408,"message": "Request Timeout", "description": "The server timed out waiting for the request."}';
    }

    location /code/409 {
      default_type application/json;
      return 409 '{"code": 409,"message": "Conflict", "description": "The request could not be completed because of a conflict in the request."}';
    }

    location /code/410 {
      default_type application/json;
      return 410 '{"code": 410,"message": "Gone", "description": "The requested page is no longer available."}';
    }

    location /code/411 {
      default_type application/json;
      return 411 '{"code": 411,"message": "Length Required", "description": "The "Content-Length" is not defined. The server will not accept the request without it."}';
    }

    location /code/412 {
      default_type application/json;
      return 412 '{"code": 412,"message": "Precondition Failed", "description": "The precondition given in the request evaluated to false by the server."}';
    }

    location /code/413 {
      default_type application/json;
      return 413 '{"code": 413,"message": "Request Entity Too Large", "description": "The server will not accept the request, because the request entity is too large."}';
    }

    location /code/414 {
      default_type application/json;
      return 414 '{"code": 414,"message": "Request-URI Too Long", "description": "The server will not accept the request, because the URL is too long. Occurs when you convert a POST request to a GET request with a long query information."}';
    }

    location /code/415 {
      default_type application/json;
      return 415 '{"code": 415,"message": "Unsupported Media Type", "description": "The server will not accept the request, because the media type is not supported."}';
    }

    location /code/416 {
      default_type application/json;
      return 416 '{"code": 416,"message": "Requested Range Not Satisfiable", "description": "The client has asked for a portion of the file, but the server cannot supply that portion."}';
    }

    location /code/417 {
      default_type application/json;
      return 417 '{"code": 417,"message": "Expectation Failed", "description": "The server cannot meet the requirements of the Expect request-header field."}';
    }

    location /code/418 {
      default_type application/json;
      return 418 '{"code": 418,"message": "I\'m a teapot", "description": "Any attempt to brew coffee with a teapot should result in the error code "418 I\'m a teapot". The resulting entity body MAY be short and stout."}';
    }

    location /code/421 {
      default_type application/json;
      return 421 '{"code": 421,"message": "Misdirected Request", "description": "The request was directed at a server that is not able to produce a response (for example because a connection reuse)."}';
    }

    location /code/422 {
      default_type application/json;
      return 422 '{"code": 422,"message": "Unprocessable Entity", "description": "The request was well-formed but was unable to be followed due to semantic errors."}';
    }

    location /code/423 {
      default_type application/json;
      return 423 '{"code": 423,"message": "Locked", "description": "The resource that is being accessed is locked."}';
    }

    location /code/424 {
      default_type application/json;
      return 424 '{"code": 424,"message": "Failed Dependency", "description": "The request failed due to failure of a previous request (e.g., a PROPPATCH)."}';
    }

    location /code/425 {
      default_type application/json;
      return 425 '{"code": 425,"message": "Too Early", "description": "Indicates that the server is unwilling to risk processing a request that might be replayed."}';
    }

    location /code/426 {
      default_type application/json;
      return 426 '{"code": 426,"message": "Upgrade Required", "description": "The client should switch to a different protocol such as TLS/1.0, given in the Upgrade header field."}';
    }

    location /code/428 {
      default_type application/json;
      return 428 '{"code": 428,"message": "Precondition Required", "description": "The origin server requires the request to be conditional."}';
    }

    location /code/429 {
      default_type application/json;
      return 429 '{"code": 429,"message": "Too Many Requests", "description": "The user has sent too many requests in a given amount of time. Intended for use with rate limiting schemes."}';
    }

    location /code/431 {
      default_type application/json;
      return 431 '{"code": 431,"message": "Request Header Fields Too Large", "description": "The server is unwilling to process the request because either an individual header field, or all the header fields collectively, are too large."}';
    }

    location /code/451 {
      default_type application/json;
      return 451 '{"code": 451,"message": "Unavailable For Legal Reasons", "description": "A server operator has received a legal demand to deny access to a resource or to a set of resources that includes the requested resource."}';
    }

    # HTTP/1.1 5xx
    location /code/500 {
      default_type application/json;
      return 500 '{"code": 500,"message": "Internal Server Error", "description": "An error has occured in a server side script, a no more specific message is suitable."}';
    }

    location /code/501 {
      default_type application/json;
      return 501 '{"code": 501,"message": "Not Implemented", "description": "The server either does not recognize the request method, or it lacks the ability to fulfill the request."}';
    }

    location /code/502 {
      default_type application/json;
      return 502 '{"code": 502,"message": "Bad Gateway", "description": "The server was acting as a gateway or proxy and received an invalid response from the upstream server."}';
    }

    location /code/503 {
      default_type application/json;
      return 503 '{"code": 503,"message": "Service Unavailable", "description": "The server is currently unavailable (overloaded or down)."}';
    }

    location /code/504 {
      default_type application/json;
      return 504 '{"code": 504,"message": "Gateway Timeout", "description": "The server was acting as a gateway or proxy and did not receive a timely response from the upstream server."}';
    }

    location /code/505 {
      default_type application/json;
      return 505 '{"code": 505,"message": "HTTP Version Not Supported", "description": "The server does not support the HTTP protocol version used in the request."}';
    }

    location /code/506 {
      default_type application/json;
      return 506 '{"code": 506,"message": "Variant Also Negotiates", "description": "Transparent content negotiation for the request results in a circular reference."}';
    }

    location /code/507 {
      default_type application/json;
      return 507 '{"code": 507,"message": "Insufficient Storage", "description": "The server is unable to store the representation needed to complete the request."}';
    }

    location /code/508 {
      default_type application/json;
      return 508 '{"code": 508,"message": "Loop Detected", "description": "The server detected an infinite loop while processing the request (sent instead of 208 Already Reported)."}';
    }

    location /code/510 {
      default_type application/json;
      return 510 '{"code": 510,"message": "Not Extended", "description": "Further extensions to the request are required for the server to fulfil it."}';
    }

    location /code/511 {
      default_type application/json;
      return 511 '{"code": 511,"message": "Network Authentication Required", "description": "The client needs to authenticate to gain network access."}';
    }

    # Unofficial
  }
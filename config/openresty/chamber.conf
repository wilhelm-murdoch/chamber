limit_req_zone $binary_remote_addr zone=chamber:1m rate=5r/s;

server {
  listen       8000;
  server_name  _;

  server_tokens             off;
  chunked_transfer_encoding off;
  gzip_static               on;
  gzip_http_version         1.1;
  gzip_proxied              expired no-cache no-store private auth;
  gzip_vary                 on;

  more_clear_headers  "Server";

  location / {
    default_type text/html;
    echo -n "<!DOCTYPE html><html lang='en'><head><meta name='apple-mobile-web-app-capable' content='yes' \><meta http-equiv='refresh' content='15' \><meta charset='utf-8' \><title>{ chamber }</title></head><style>"
    echo -n "*{margin:0;padding:0}body,html{width:100%;height:100%;background-color:#000}.wrapper{width:100%;height:100%;display:flex;justify-content:center;align-items:center}.wrapper h1.glitch{color:#fff;font-family:sans-serif;font-weight:800;position:relative;font-size:100px;padding:30px}.wrapper h1.glitch::after,.wrapper h1.glitch::before{padding:30px;color:#fff;content:'{ chamber }';position:absolute;width:100%;height:100%;background:#000;overflow:hidden;top:0}.wrapper h1.glitch::before{left:3px;text-shadow:-2px 0 red;animation-name:glitch-animation-1;animation-duration:2s;animation-timing-function:linear;animation-delay:0s;animation-iteration-count:infinite;animation-direction:reverse-alternate}.wrapper h1.glitch::after{left:-3px;text-shadow:-2px 0 #00f;animation-name:glitch-animation-2;animation-duration:2s;animation-timing-function:linear;animation-delay:0s;animation-iteration-count:infinite;animation-direction:reverse-alternate}"
    echo -n "@keyframes glitch-animation-1{0%{clip:rect(36px,600px,94px,30px)}5%{clip:rect(120px,600px,5px,30px)}10%{clip:rect(116px,600px,138px,30px)}15%{clip:rect(10px,600px,40px,30px)}20%{clip:rect(82px,600px,100px,30px)}25%{clip:rect(149px,600px,17px,30px)}30%{clip:rect(38px,600px,7px,30px)}35%{clip:rect(125px,600px,110px,30px)}40%{clip:rect(63px,600px,41px,30px)}45%{clip:rect(27px,600px,50px,30px)}50%{clip:rect(81px,600px,101px,30px)}55%{clip:rect(129px,600px,44px,30px)}60%{clip:rect(7px,600px,96px,30px)}65%{clip:rect(124px,600px,71px,30px)}70%{clip:rect(6px,600px,88px,30px)}75%{clip:rect(89px,600px,65px,30px)}80%{clip:rect(138px,600px,2px,30px)}85%{clip:rect(62px,600px,57px,30px)}90%{clip:rect(109px,600px,70px,30px)}95%{clip:rect(116px,600px,19px,30px)}100%{clip:rect(130px,600px,52px,30px)}}@keyframes glitch-animation-2{0%{clip:rect(29px,600px,93px,30px)}5%{clip:rect(14px,600px,68px,30px)}10%{clip:rect(94px,600px,40px,30px)}15%{clip:rect(4px,600px,58px,30px)}20%{clip:rect(1px,600px,28px,30px)}25%{clip:rect(39px,600px,11px,30px)}30%{clip:rect(45px,600px,93px,30px)}35%{clip:rect(83px,600px,94px,30px)}40%{clip:rect(39px,600px,110px,30px)}45%{clip:rect(95px,600px,88px,30px)}50%{clip:rect(96px,600px,103px,30px)}55%{clip:rect(17px,600px,29px,30px)}60%{clip:rect(53px,600px,1px,30px)}65%{clip:rect(129px,600px,128px,30px)}70%{clip:rect(74px,600px,105px,30px)}75%{clip:rect(40px,600px,48px,30px)}80%{clip:rect(90px,600px,52px,30px)}85%{clip:rect(57px,600px,83px,30px)}90%{clip:rect(39px,600px,143px,30px)}95%{clip:rect(25px,600px,87px,30px)}100%{clip:rect(128px,600px,91px,30px)}}"
    echo -n "</style><body><div class='wrapper' data-text='{ chamber }'><h1 class='glitch'>{ chamber }</h1></div></body></html>";
  }

  location /auth {
    auth_basic "Enter the Chamber";
    auth_basic_user_file /etc/nginx/.htpasswd;
    default_type text/html;
    echo_location_async /header;
  }

  location "/rate-limit" {
    limit_req zone=chamber burst=10 nodelay;
    default_type application/json;
    echo "{\"elapsed\": $echo_timer_elapsed}";
  }

  location /latency/slow {
    default_type application/json;
    echo_sleep 5;
    echo "{\"elapsed\": $echo_timer_elapsed}";
  }

  location /latency/slower {
    default_type application/json;
    echo_sleep 10;
    echo "{\"elapsed\": $echo_timer_elapsed}";
  }

  location /latency/slowest {
    default_type application/json;
    echo_sleep 20;
    echo "{\"elapsed\": $echo_timer_elapsed}";
  }

  location /latency/erratic {
    default_type application/json;

    set_random $random 1 10;
    echo_sleep $random;

    echo "{\"elapsed\": $echo_timer_elapsed}";
  }

  location /latency/degrading {
    default_type application/json;

    set $connections $connections_active;

    content_by_lua_block {
      ngx.sleep(1 + ( ngx.var.connections / 10 ))
      local elapsed_time = ngx.now() - ngx.req.start_time()
      ngx.say(string.format('{"elapsed": %f}', elapsed_time))
    }
  }

  location "/hello-world" {
    default_type text/html;

    content_by_lua_block {
      local languages = {
        "Hello, world!", "Hello Wêreld!", "Përshendetje Botë!", "ሰላም ልዑል!", "مرحبا بالعالم!", "Բարեւ աշխարհ!", "Salam, dünya!", "Kaixo Mundua!", "Прывітанне Сусвет!", "ওহে বিশ্ব!", "Zdravo svijete!", "Здравей свят!", "Hola món!", "Hello, kalibutan!", "Moni Dziko Lapansi!",
        "你好，世界！", "你好，世界！", "Salute, mondu !", "Pozdrav svijete!", "Ahoj světe!", "Hej Verden!", "Hallo Wereld!", "Saluton mondo!", "Tere, Maailm!", "Hello, mundo!", "Hei maailma!", "Bonjour le monde!", "Hallo wrâld!", "Ola, mundo!", "Გამარჯობა მსოფლიო!", "Hallo Welt!",
        "Γειά σου Κόσμε!", "હેલો, વિશ્વ!", "Bonjou, mond!", "Sannu Duniya!", "Aloha, honua!", "שלום עולם!", "नमस्ते दुनिया!", "Nyob zoo, ntiaj teb!", "Helló Világ!", "Halló heimur!", "Ndewo Ụwa!", "Halo Dunia!", "Dia duit, a shaoghail!", "Ciao mondo!", "こんにちは世界！", "Hello, donya!",
        "ಹಲೋ, ವಿಶ್ವ!", "Сәлем Әлем!", "សួស្តី​ពិភពលោក!", "Mwaramutse, isi!", "안녕하세요, 세계입니다!", "Silav, dinya!", "Салам дүйнө!", "ສະ​ບາຍ​ດີ​ຊາວ​ໂລກ!", "Salve mundus!", "Sveika pasaule!", "Labas pasauli!", "Moien Welt!", "Здраво свету!", "Hai dunia!", "ഹലോ വേൾഡ്!", "Hello dinja!", "Kia ora te ao!",
        "नमस्कार जग!", "Сайн уу дэлхий!", "မင်္ဂလာပါကမ္ဘာလောက!", "नमस्कार संसार!", "Hei Verden!", "ନମସ୍କାର ବିଶ୍ୱବାସି!", "سلام نړی!", "Witaj świecie!", "Olá Mundo!", "ਸਤਿ ਸ੍ਰੀ ਅਕਾਲ ਦੁਨਿਆ!", "Salut Lume!", "Привет, мир!", "Talofa le lalolagi!", "Hàlo a Shaoghail!", "Здраво Свете!", "Lefatše Lumela!",
        "Mhoro nyika!", "هيلو دنيا!", "හෙලෝ වර්ල්ඩ්!", "Ahoj svete!", "Pozdravljen, svet!", "Salaamu calaykum!", "¡Hola Mundo!", "Halo Dunya!", "Salamu, Dunia!", "Hej världen!", "Салом Ҷаҳон!", "வணக்கம் உலகம்!", "Сәлам, Дөнья!", "హలో వరల్డ్!", "สวัสดีชาวโลก!", "Selam Dünya!", "Salam dünýä!",
        "Привіт Світ!", "ہیلو دنیا!", "ياخشىمۇسىز دۇنيا!", "Salom Dunyo!", "Chào thế giới!", "Helo Byd!", "Molo Lizwe!", "העלא וועלט!", "Mo ki O Ile Aiye!", "Sawubona Mhlaba!"
      }

      ngx.say( languages[ math.random( #languages ) ] )
    }
  }

  location /echo {
    default_type application/json;

    content_by_lua_block {
      ngx.req.read_body()
      local args, err = ngx.req.get_post_args()
      local response = {""}
      local args = ngx.req.get_uri_args()
      local body = args["body"]

      if type(body) == "nil" then
        ngx.say("You must specify '/echo?body=string'!")
        ngx.exit(ngx.HTTP_BAD_REQUEST)
      end

      ngx.say(args["body"])
      ngx.exit(ngx.OK)
    }
  }

  location /headers {
    default_type application/json;

    content_by_lua_block {
      local items = {}

      for k, v in pairs(ngx.req.get_headers()) do
        table.insert(items, string.format('{"key": "%s", "value": "%s"}', string.upper(k), v))
      end

      ngx.say('[', table.concat(items, ','), ']')
    }
  }

  location /docs {
    return 301 https://github.com/wilhelm-murdoch/chamber/blob/main/README.md;
  }

  location /now {
    default_type application/json;

    content_by_lua_block {
      ngx.say(string.format("{\"now\": %s}", ngx.now()))
      ngx.exit(ngx.OK)
    }
  }

  location /hostname {
    default_type application/json;

    content_by_lua_block {
      ngx.say(string.format("{\"hostname\": \"%s\"}", ngx.var.host))
      ngx.exit(ngx.OK)
    }
  }

  location /params/post {
    default_type application/json;

    content_by_lua_block {
      ngx.req.read_body()
      local args, err = ngx.req.get_post_args()
      local items = {}

      if next(args) == nil then
        ngx.say("{}")
        ngx.exit(ngx.OK)
      end

      for k1, v1 in pairs(args) do
        if type(v1) == "table" then
          values = {}
          for k2, v2 in pairs(v1) do
            table.insert(values, v2)
          end
          table.insert(items, string.format('{"key": "%s", "value": ["%s"]}', k1, table.concat(values, '","')))
        else
          table.insert(items, string.format('{"key": "%s", "value": "%s"}', k1, v1))
        end
      end

      ngx.say('[', table.concat(items, ','), ']')
    }
  }

  location /params/get {
    default_type application/json;

    content_by_lua_block {
      local args, err = ngx.req.get_uri_args()

      if next(args) == nil then
        ngx.say("{}")
        ngx.exit(ngx.OK)
      end

      items = {}
      for k1, v1 in pairs(args) do
        if type(v1) == "table" then
          values = {}
          for k2, v2 in pairs(v1) do
            table.insert(values, v2)
          end
          table.insert(items, string.format('{"key": "%s", "value": ["%s"]}', k1, table.concat(values, '","')))
        else
          table.insert(items, string.format('{"key": "%s", "value": "%s"}', k1, v1))
        end
      end

      ngx.say('[', table.concat(items, ','), ']')
    }
  }

  location /size/smallest {
    default_type text/html;
    echo_duplicate 150 "echo ";
  }

  location /size/small {
    default_type text/html;
    echo_duplicate 1_500 "echo ";
  }

  location /size/medium {
    default_type text/html;
    echo_duplicate 15_000 "echo ";
  }

  location /size/large {
    default_type text/html;
    echo_duplicate 150_000 "echo ";
  }

  location /size/larger {
    default_type text/html;
    echo_duplicate 1_500_000 "echo ";
  }

  location /size/largest {
    default_type text/html;
    echo_duplicate 15_000_000 "echo ";
  }

  location /status {
    stub_status on;
  }

  location /up {
    default_type text/html;
    alias /.git_sha;
  }

  # HTTP/1.1 1xx
  location /code/100 {
    default_type application/json;
    return 100 '{"code": 100,"message": "Continue", "description": "The server has received the request headers, and the client should proceed to send the request body."}';
  }

  location /code/101 {
    default_type application/json;
    return 101 '{"code": 101,"message": "Switching Protocols", "description": "The requester has asked the server to switch protocols."}';
  }

  location /code/102 {
    default_type application/json;
    return 102 '{"code": 102,"message": "Processing", "description": "A WebDAV request may contain many sub-requests involving file operations, requiring a long time to complete the request. This code indicates that the server has received and is processing the request, but no response is available yet."}';
  }

  location /code/103 {
    default_type application/json;
    return 103 '{"code": 103,"message": "Checkpoint", "description": "Used in the resumable requests proposal to resume aborted PUT or POST requests."}';
  }

  # HTTP/1.1 2xx
  location /code/200 {
    default_type application/json;
    return 200 '{"code": 200,"message": "OK", "description": "The request is OK (this is the standard response for successful HTTP requests)."}';
  }

  location /code/201 {
    default_type application/json;
    return 201 '{"code": 201,"message": "Created", "description": "The request has been fulfilled, and a new resource is created."}';
  }

  location /code/202 {
    default_type application/json;
    return 202 '{"code": 202,"message": "Accepted", "description": "The request has been accepted for processing, but the processing has not been completed."}';
  }

  location /code/203 {
    default_type application/json;
    return 203 '{"code": 203,"message": "Non-Authoritative Information", "description": "The request has been successfully processed, but is returning information that may be from another source."}';
  }

  location /code/204 {
    default_type application/json;
    return 204 '{"code": 204,"message": "No Content", "description": "The request has been successfully processed, but is not returning any content."}';
  }

  location /code/205 {
    default_type application/json;
    return 205 '{"code": 205,"message": "Reset Content", "description": "The request has been successfully processed, but is not returning any content, and requires that the requester reset the document view."}';
  }

  location /code/206 {
    default_type application/json;
    return 206 '{"code": 206,"message": "Partial Content", "description": "The server is delivering only part of the resource due to a range header sent by the client."}';
  }

  location /code/207 {
    default_type application/json;
    return 207 '{"code": 207,"message": "Multi-Status", "description": "The message body that follows is by default an XML message and can contain a number of separate response codes, depending on how many sub-requests were made."}';
  }

  location /code/208 {
    default_type application/json;
    return 208 '{"code": 208,"message": "Already Reported", "description": "The members of a DAV binding have already been enumerated in a preceding part of the (multistatus) response, and are not being included again."}';
  }

  location /code/226 {
    default_type application/json;
    return 226 '{"code": 226,"message": "IM Used", "description": "The server has fulfilled a request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance."}';
  }

  # HTTP/1.1 3xx
  location /code/300 {
    default_type application/json;
    return 300 '{"code": 300,"message": "Multiple Choices", "description": "A link list. The user can select a link and go to that location. Maximum five addresses."}';
  }

  location /code/301 {
    default_type application/json;
    return 301 '{"code": 301,"message": "Moved Permanently", "description": "The requested page has moved to a new URL."}';
  }

  location /code/302 {
    default_type application/json;
    return 302 '{"code": 302,"message": "Found", "description": "The requested page has moved temporarily to a new URL."}';
  }

  location /code/303 {
    default_type application/json;
    return 303 '{"code": 303,"message": "See Other", "description": "The requested page can be found under a different URL."}';
  }

  location /code/304 {
    default_type application/json;
    return 304 '{"code": 304,"message": "Not Modified", "description": "Indicates the requested page has not been modified since last requested."}';
  }

  location /code/305 {
    default_type application/json;
    return 305 '{"code": 305,"message": "Use Proxy", "description": "The requested resource is available only through a proxy, the address for which is provided in the response."}';
  }

  location /code/306 {
    default_type application/json;
    return 306 '{"code": 306,"message": "Switch Proxy", "description": "-- No longer used --."}';
  }

  location /code/307 {
    default_type application/json;
    return 307 '{"code": 307,"message": "Temporary Redirect", "description": "The requested page has moved temporarily to a new URL."}';
  }

  location /code/308 {
    default_type application/json;
    return 308 '{"code": 308,"message": "Resume Incomplete", "description": "Used in the resumable requests proposal to resume aborted PUT or POST requests."}';
  }

  # HTTP/1.1 4xx
  location /code/400 {
    default_type application/json;
    return 400 '{"code": 400,"message": "Bad Request", "description": "The request cannot be fulfilled due to bad syntax."}';
  }

  location /code/401 {
    default_type application/json;
    return 401 '{"code": 401,"message": "Unauthorized", "description": "The request was a legal request, but the server is refusing to respond to it. For use when authentication is possible but has failed or not yet been provided."}';
  }

  location /code/402 {
    default_type application/json;
    return 402 '{"code": 402,"message": "Payment Required", "description": "-- Reserved for future use --."}';
  }

  location /code/403 {
    default_type application/json;
    return 403 '{"code": 403,"message": "Forbidden", "description": "The request was a legal request, but the server is refusing to respond to it."}';
  }

  location /code/404 {
    default_type application/json;
    return 404 '{"code": 404,"message": "Not Found", "description": "The requested page could not be found but may be available again in the future."}';
  }

  location /code/405 {
    default_type application/json;
    return 405 '{"code": 405,"message": "Method Not Allowed", "description": "A request was made of a page using a request method not supported by that page."}';
  }

  location /code/406 {
    default_type application/json;
    return 406 '{"code": 406,"message": "Not Acceptable", "description": "The server can only generate a response that is not accepted by the client."}';
  }

  location /code/407 {
    default_type application/json;
    return 407 '{"code": 407,"message": "Proxy Authentication Required", "description": "The client must first authenticate itself with the proxy."}';
  }

  location /code/408 {
    default_type application/json;
    return 408 '{"code": 408,"message": "Request Timeout", "description": "The server timed out waiting for the request."}';
  }

  location /code/409 {
    default_type application/json;
    return 409 '{"code": 409,"message": "Conflict", "description": "The request could not be completed because of a conflict in the request."}';
  }

  location /code/410 {
    default_type application/json;
    return 410 '{"code": 410,"message": "Gone", "description": "The requested page is no longer available."}';
  }

  location /code/411 {
    default_type application/json;
    return 411 '{"code": 411,"message": "Length Required", "description": "The "Content-Length" is not defined. The server will not accept the request without it."}';
  }

  location /code/412 {
    default_type application/json;
    return 412 '{"code": 412,"message": "Precondition Failed", "description": "The precondition given in the request evaluated to false by the server."}';
  }

  location /code/413 {
    default_type application/json;
    return 413 '{"code": 413,"message": "Request Entity Too Large", "description": "The server will not accept the request, because the request entity is too large."}';
  }

  location /code/414 {
    default_type application/json;
    return 414 '{"code": 414,"message": "Request-URI Too Long", "description": "The server will not accept the request, because the URL is too long. Occurs when you convert a POST request to a GET request with a long query information."}';
  }

  location /code/415 {
    default_type application/json;
    return 415 '{"code": 415,"message": "Unsupported Media Type", "description": "The server will not accept the request, because the media type is not supported."}';
  }

  location /code/416 {
    default_type application/json;
    return 416 '{"code": 416,"message": "Requested Range Not Satisfiable", "description": "The client has asked for a portion of the file, but the server cannot supply that portion."}';
  }

  location /code/417 {
    default_type application/json;
    return 417 '{"code": 417,"message": "Expectation Failed", "description": "The server cannot meet the requirements of the Expect request-header field."}';
  }

  location /code/418 {
    default_type application/json;
    return 418 '{"code": 418,"message": "I\'m a teapot", "description": "Any attempt to brew coffee with a teapot should result in the error code 418 I\'m a teapot. The resulting entity body MAY be short and stout."}';
  }

  location /code/421 {
    default_type application/json;
    return 421 '{"code": 421,"message": "Misdirected Request", "description": "The request was directed at a server that is not able to produce a response (for example because a connection reuse)."}';
  }

  location /code/422 {
    default_type application/json;
    return 422 '{"code": 422,"message": "Unprocessable Entity", "description": "The request was well-formed but was unable to be followed due to semantic errors."}';
  }

  location /code/423 {
    default_type application/json;
    return 423 '{"code": 423,"message": "Locked", "description": "The resource that is being accessed is locked."}';
  }

  location /code/424 {
    default_type application/json;
    return 424 '{"code": 424,"message": "Failed Dependency", "description": "The request failed due to failure of a previous request (e.g., a PROPPATCH)."}';
  }

  location /code/425 {
    default_type application/json;
    return 425 '{"code": 425,"message": "Too Early", "description": "Indicates that the server is unwilling to risk processing a request that might be replayed."}';
  }

  location /code/426 {
    default_type application/json;
    return 426 '{"code": 426,"message": "Upgrade Required", "description": "The client should switch to a different protocol such as TLS/1.0, given in the Upgrade header field."}';
  }

  location /code/428 {
    default_type application/json;
    return 428 '{"code": 428,"message": "Precondition Required", "description": "The origin server requires the request to be conditional."}';
  }

  location /code/429 {
    default_type application/json;
    return 429 '{"code": 429,"message": "Too Many Requests", "description": "The user has sent too many requests in a given amount of time. Intended for use with rate limiting schemes."}';
  }

  location /code/431 {
    default_type application/json;
    return 431 '{"code": 431,"message": "Request Header Fields Too Large", "description": "The server is unwilling to process the request because either an individual header field, or all the header fields collectively, are too large."}';
  }

  location /code/451 {
    default_type application/json;
    return 451 '{"code": 451,"message": "Unavailable For Legal Reasons", "description": "A server operator has received a legal demand to deny access to a resource or to a set of resources that includes the requested resource."}';
  }

  # HTTP/1.1 5xx
  location /code/500 {
    default_type application/json;
    return 500 '{"code": 500,"message": "Internal Server Error", "description": "An error has occured in a server side script, a no more specific message is suitable."}';
  }

  location /code/501 {
    default_type application/json;
    return 501 '{"code": 501,"message": "Not Implemented", "description": "The server either does not recognize the request method, or it lacks the ability to fulfill the request."}';
  }

  location /code/502 {
    default_type application/json;
    return 502 '{"code": 502,"message": "Bad Gateway", "description": "The server was acting as a gateway or proxy and received an invalid response from the upstream server."}';
  }

  location /code/503 {
    default_type application/json;
    return 503 '{"code": 503,"message": "Service Unavailable", "description": "The server is currently unavailable (overloaded or down)."}';
  }

  location /code/504 {
    default_type application/json;
    return 504 '{"code": 504,"message": "Gateway Timeout", "description": "The server was acting as a gateway or proxy and did not receive a timely response from the upstream server."}';
  }

  location /code/505 {
    default_type application/json;
    return 505 '{"code": 505,"message": "HTTP Version Not Supported", "description": "The server does not support the HTTP protocol version used in the request."}';
  }

  location /code/506 {
    default_type application/json;
    return 506 '{"code": 506,"message": "Variant Also Negotiates", "description": "Transparent content negotiation for the request results in a circular reference."}';
  }

  location /code/507 {
    default_type application/json;
    return 507 '{"code": 507,"message": "Insufficient Storage", "description": "The server is unable to store the representation needed to complete the request."}';
  }

  location /code/508 {
    default_type application/json;
    return 508 '{"code": 508,"message": "Loop Detected", "description": "The server detected an infinite loop while processing the request (sent instead of 208 Already Reported)."}';
  }

  location /code/510 {
    default_type application/json;
    return 510 '{"code": 510,"message": "Not Extended", "description": "Further extensions to the request are required for the server to fulfil it."}';
  }

  location /code/511 {
    default_type application/json;
    return 511 '{"code": 511,"message": "Network Authentication Required", "description": "The client needs to authenticate to gain network access."}';
  }

  # Unofficial Codes
  location /code/218 {
    default_type application/json;
    return 218 '{"code": 218,"message": "This is fine", "description": "Used as a catch-all error condition for allowing response bodies to flow through Apache when ProxyErrorOverride is enabled."}';
  }

  location /code/419 {
    default_type application/json;
    return 419 '{"code": 419,"message": "Page Expired", "description": "Used by the Laravel Framework when a CSRF Token is missing or expired."}';
  }

  location /code/420 {
    default_type application/json;
    return 420 '{"code": 420,"message": "Enhance Your Calm", "description": "Returned by version 1 of the Twitter Search and Trends API when the client is being rate limited; versions 1.1 and later use the 429 Too Many Requests response code instead."}';
  }

  location /code/430 {
    default_type application/json;
    return 430 '{"code": 430,"message": "Request Header Fields Too Large", "description": "Used by Shopify, instead of the 429 Too Many Requests response code, when too many URLs are requested within a certain time frame."}';
  }

  location /code/450 {
    default_type application/json;
    return 450 '{"code": 450,"message": "Blocked by Windows Parental Controls", "description": "The Microsoft extension code indicated when Windows Parental Controls are turned on and are blocking access to the requested webpage."}';
  }

  location /code/498 {
    default_type application/json;
    return 498 '{"code": 498,"message": "Invalid Token", "description": "Returned by ArcGIS for Server. Code 498 indicates an expired or otherwise invalid token."}';
  }

  location /code/499 {
    default_type application/json;
    return 499 '{"code": 499,"message": "Token Required", "description": "Returned by ArcGIS for Server. Code 499 indicates that a token is required but was not submitted."}';
  }

  location /code/509 {
    default_type application/json;
    return 509 '{"code": 509,"message": "Bandwidth Limit Exceeded", "description": "The server has exceeded the bandwidth specified by the server administrator; this is often used by shared hosting providers to limit the bandwidth of customers.["}';
  }

  location /code/529 {
    default_type application/json;
    return 529 '{"code": 529,"message": "Site is overloaded", "description": "Used by Qualys in the SSLLabs server testing API to signal that the site can\'t process the request."}';
  }

  location /code/530 {
    default_type application/json;
    return 530 '{"code": 530,"message": "Site is frozen", "description": "Used by the Pantheon web platform to indicate a site that has been frozen due to inactivity."}';
  }

  location /code/598 {
    default_type application/json;
    return 598 '{"code": 598,"message": "Network read timeout error", "description": "Used by some HTTP proxies to signal a network read timeout behind the proxy to a client in front of the proxy."}';
  }

  # IIS Codes
  location /code/440 {
    default_type application/json;
    return 440 '{"code": 440,"message": "Login Time-out", "description": "The client\'s session has expired and must log in again."}';
  }

  location /code/449 {
    default_type application/json;
    return 449 '{"code": 449,"message": "Retry With", "description": "The server cannot honour the request because the user has not provided the required information."}';
  }

  # Nginx Codes
  location /code/444 {
    default_type application/json;
    return 444 '{"code": 444,"message": "No Response", "description": "Used internally to instruct the server to return no information to the client and close the connection immediately."}';
  }

  location /code/494 {
    default_type application/json;
    return 494 '{"code": 494,"message": "Request header too large", "description": "Client sent too large request or too long header line."}';
  }

  location /code/495 {
    default_type application/json;
    return 495 '{"code": 495,"message": "SSL Certificate Error", "description": "An expansion of the 400 Bad Request response code, used when the client has provided an invalid client certificate."}';
  }

  location /code/496 {
    default_type application/json;
    return 496 '{"code": 496,"message": "SSL Certificate Required", "description": "An expansion of the 400 Bad Request response code, used when a client certificate is required but not provided."}';
  }

  location /code/497 {
    default_type application/json;
    return 497 '{"code": 497,"message": "HTTP Request Sent to HTTPS Port", "description": "An expansion of the 400 Bad Request response code, used when the client has made a HTTP request to a port listening for HTTPS requests."}';
  }

  # Cloudflare Codes
  location /code/520 {
    default_type application/json;
    return 520 '{"code": 520,"message": "Web Server Returned an Unknown Error", "description": "The origin server returned an empty, unknown, or unexpected response to Cloudflare."}';
  }

  location /code/521 {
    default_type application/json;
    return 521 '{"code": 521,"message": "Web Server Is Down", "description": "The origin server refused connections from Cloudflare. Security solutions at the origin may be blocking legitimate connections from certain Cloudflare IP addresses."}';
  }

  location /code/522 {
    default_type application/json;
    return 522 '{"code": 522,"message": "Connection Timed Out", "description": "Cloudflare timed out contacting the origin server."}';
  }

  location /code/523 {
    default_type application/json;
    return 523 '{"code": 523,"message": "Origin Is Unreachable", "description": "Cloudflare could not reach the origin server; for example, if the DNS records for the origin server are incorrect or missing."}';
  }

  location /code/524 {
    default_type application/json;
    return 524 '{"code": 524,"message": "A Timeout Occurred", "description": "Cloudflare was able to complete a TCP connection to the origin server, but did not receive a timely HTTP response."}';
  }

  location /code/525 {
    default_type application/json;
    return 525 '{"code": 525,"message": "SSL Handshake Failed", "description": "Cloudflare could not negotiate a SSL/TLS handshake with the origin server."}';
  }

  location /code/526 {
    default_type application/json;
    return 526 '{"code": 526,"message": "Invalid SSL Certificate", "description": "Cloudflare could not validate the SSL certificate on the origin web server. Also used by Cloud Foundry\'s gorouter."}';
  }

  location /code/527 {
    default_type application/json;
    return 527 '{"code": 527,"message": "Railgun Error", "description": "Error 527 indicates an interrupted connection between Cloudflare and the origin server\'s Railgun server."}';
  }

  # AWS ELB Codes
  location /code/460 {
    default_type application/json;
    return 460 '{"code": 460,"message": "???", "description": "Client closed the connection with the load balancer before the idle timeout period elapsed. Typically when client timeout is sooner than the Elastic Load Balancer\'s timeout."}';
  }

  location /code/463 {
    default_type application/json;
    return 463 '{"code": 463,"message": "???", "description": "The load balancer received an X-Forwarded-For request header with more than 30 IP addresses."}';
  }

  location /code/561 {
    default_type application/json;
    return 561 '{"code": 561,"message": "Unauthorized", "description": "An error around authentication returned by a server registered with a load balancer. You configured a listener rule to authenticate users, but the identity provider (IdP) returned an error code when authenticating the user."}';
  }

  # Common Caching Codes
  location /code/110 {
    default_type application/json;
    return 110 '{"code": 110,"message": "Response is Stale", "description": "The response provided by a cache is stale (the content\'s age exceeds a maximum age set by a Cache-Control header or heuristically chosen lifetime)."}';
  }

  location /code/111 {
    default_type application/json;
    return 111 '{"code": 111,"message": "Revalidation Failed", "description": "The cache was unable to validate the response, due to an inability to reach the origin server."}';
  }

  location /code/112 {
    default_type application/json;
    return 112 '{"code": 112,"message": "Disconnected Operation", "description": "The cache is intentionally disconnected from the rest of the network."}';
  }

  location /code/113 {
    default_type application/json;
    return 113 '{"code": 113,"message": "Heuristic Expiration", "description": "The cache heuristically chose a freshness lifetime greater than 24 hours and the response\'s age is greater than 24 hours."}';
  }

  location /code/199 {
    default_type application/json;
    return 199 '{"code": 199,"message": "Miscellaneous Warning", "description": "Arbitrary, non-specific warning. The warning text may be logged or presented to the user."}';
  }

  location /code/214 {
    default_type application/json;
    return 214 '{"code": 214,"message": "Transformation Applied" "description": "Added by a proxy if it applies any transformation to the representation, such as changing the content encoding, media type or the like."}';
  }

  location /code/299 {
    default_type application/json;
    return 299 '{"code": 299,"message": Miscellaneous Persistent Warning "description": "Same as 199, but indicating a persistent warning."}';
  }
}